export interface EventPhase {
    initial,
    capturing,
    atTarget,
    bubbling,
    complete
}

export interface EventContext {
    readonly type: string;
    readonly bubbles: boolean;
    readonly cancelable: boolean;
    readonly timestamp: Number;
    readonly phase: EventPhase;
    readonly currentTarget: EventTarget;
    cancel(): void;
    stopPropagation(immediate?: boolean);
}

export interface EventHandler<T,C> {
    ()
}

export interface EventSource {

}

export interface EventTarget {
    addEventListener(type: string, listener: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void;
    dispatchEvent(evt: Event): boolean;
    removeEventListener(type: string, listener?: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;
}

export interface Service {
  readonly name: string;
  clone(): Service;
  equals(other: Service);
}

export interface CompositeService extends Service {
  readonly services: ReadonlyMap<string, Service>;
}

export interface Type extends CompositeService {
    readonly inputs;
    readonly outputs;
}

export interface Module extends Type {
    readonly scripts: ReadonlyArray<string>;
}

export interface Compose {
    module: Module;
}

export declare let module: Module;

export declare function addEventListener