#!/bin/bash
set -e

if [ -n "$AZ_COMPOSE_DEV" ]; then
  set -x
fi

ME="$0"
ME=$(which "$ME")
MD=$(cd $(dirname "$ME") && pwd -P)
ME=$(basename "$ME")
VER=0.1.0

fatal() {
  echo $ME: >&2 "$@"
  exit 1
}

COMMAND=$1
if [ -z "$COMMAND" ]; then
  fatal missing command
elif [ "$COMMAND" == "--version" ]; then
  echo $ME $VER
  exit 0
elif [ "$COMMAND" != "up" -a "$COMMAND" != "down" ]; then
  fatal unknown command -- $COMMAND
fi
shift

resolve-az() {
  az=$(which az 2>/dev/null || true)
  if [ -z "$az" ]; then
    az.cmd --version >/dev/null 2>&1 && az=az.cmd
  fi
  if [ -z "$az" ]; then
    fatal cannot find az
  fi
  echo $az
}

OPTSTRING=f:g:
LONGOPTS=file:,subscription:,resource-group:
if [ "$COMMAND" == "up" ]; then
  OPTSTRING=${OPTSTRING}l:e:
  LONGOPTS=$LONGOPTS,location:,env:,env-file:
elif [ "$COMMAND" == "down" ]; then
  OPTSTRING=${OPTSTRING}dy
  LONGOPTS=$LONGOPTS,delete-group,yes
fi
ARGS=$(getopt -n $ME -o $OPTSTRING -l $LONGOPTS -- "$@") || exit 1
eval set -- "$ARGS"
while true; do
  case "$1" in
    -f|--compose-file)   COMPOSE_FILE="$2"; shift;;
       --subscription)   SUBSCRIPTION="$2"; shift;;
    -g|--resource-group) RESOURCE_GROUP="$2"; shift;;
    -l|--location)       LOCATION="$2"; shift;;
    -e|--env)            ENV+=("$2"); shift;;
       --env-file)       ENV_FILE=("$2"); shift;;
    -d|--delete-group)   DELETE_GROUP=1;;
    -y|--yes)            YES=1;;
       --)               break;;
  esac
  shift
done

if [ -z "$COMPOSE_FILE" ]; then
  COMPOSE_FILE=az-compose.yml
  if [ ! -f "$COMPOSE_FILE" ]; then
    COMPOSE_FILE=az-compose.yaml
  fi
fi
if [ ! -f "$COMPOSE_FILE" ]; then
  fatal compose file \'$COMPOSE_FILE\' not found
fi

if [ -z "$SUBSCRIPTION" ]; then
  az=${az:-$(resolve-az)}
  SUBSCRIPTION=$($az account show --query id -o tsv)
fi
if [ -z "$SUBSCRIPTION" ]; then
  fatal option is required -- subscription
fi

if [ -z "$RESOURCE_GROUP" ]; then
  # TODO: get any default resource group from az
  fatal option is required -- g, resource-group
fi

if [ "$COMMAND" == "up" ]; then
  az=${az:-$(resolve-az)}
  RG_LOCATION=$($az group show -n "$RESOURCE_GROUP" --query location -o tsv 2>/dev/null || echo -n)
  if [ -z "$RG_LOCATION" ]; then
    if [ -z "$LOCATION" ]; then
      echo Resource group \'$RESOURCE_GROUP\' does not exist
      fatal option is required -- l, location
    fi
    echo Creating resource group \'$RESOURCE_GROUP\' in location \'$LOCATION\'...
    $az group create -n "$RESOURCE_GROUP" -l "$LOCATION" >/dev/null
    echo Created resource group \'$RESOURCE_GROUP\' in location \'$LOCATION\'
  else
    if [ -z "$LOCATION" ]; then
      LOCATION="$RG_LOCATION"
      echo Using resource group \'$RESOURCE_GROUP\'
    else
      echo Using resource group \'$RESOURCE_GROUP\'
    fi
    echo Using default location \'$LOCATION\'
  fi
fi

if [ "$COMMAND" == "down" -a -z "$YES" ]; then
  ANSWER=unknown
  while [ "$ANSWER" != "" -a \
          "$ANSWER" != "Y" -a "$ANSWER" != "y" -a \
          "$ANSWER" != "N" -a "$ANSWER" != "n" ]; do
    echo -n Are you sure you want to compose down the services in \'$COMPOSE_FILE\'
    if [ -n "$DELETE_GROUP" ]; then
      echo -n " "and delete resource group \'$RESOURCE_GROUP\'
    fi
    echo -n ? \(y/N\):" "
    read ANSWER
  done
  ANSWER=${ANSWER:-N}
  if [ "$ANSWER" == "N" -o "$ANSWER" == "n" ]; then
    echo >&2 Operation cancelled.
    exit 0
  fi
fi

hash() {
  HASH=$(echo -n /subscriptions/$SUBSCRIPTION/resourceGroups/$RESOURCE_GROUP/$1 | sha1sum)
  echo ${HASH::16}
}

azq() {
  $az "${@:2}" 2>&1 > /dev/null | while read line; do
    if [ "${line::9}" == "WARNING: " ]; then
      continue
    fi
    SKIP=
    for ((i=0; i<${#STDERR_FILTER[@]}; i++)); do
      if [ "${line::${#STDERR_FILTER[$i]}}" == "${STDERR_FILTER[$i]}" ]; then
        SKIP=1
        break
      fi
    done
    if [ -n "$SKIP" ]; then
      continue
    fi
    echo >&2 $1: $line
  done
  return $PIPESTATUS
}

source .az-compose/$COMMAND

if [ "$COMMAND" == "down" -a -n "$DELETE_GROUP" ]; then
  az=${az:-$(resolve-az)}
  RG_EXISTS=$($az group exists -n "$RESOURCE_GROUP" -o tsv)
  if [ "$RG_EXISTS" == "false" ]; then
    echo Resource group \'$RESOURCE_GROUP\' does not exist
  else
    echo Deleting resource group \'$RESOURCE_GROUP\'...
    $az group delete -n "$RESOURCE_GROUP" --yes >/dev/null
    echo Deleted resource group \'$RESOURCE_GROUP\'
  fi
fi