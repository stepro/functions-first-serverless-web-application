#!/bin/bash
set -e

ME="$0"
ME=$(which "$ME")
MD=$(cd $(dirname "$ME") && pwd -P)
ME=$(basename "$ME")
if [ -n "$HWD" ]; then
  if [ "${HWD::1}" != "/" ]; then
    WD="${HWD:2}"
    WD="/host${WD//\\/\/}"
  else
    WD="/host$HWD"
  fi
  cd "$WD"
fi
MY_PID=$$

VER=0.1.0
if [ "$1" == "--version" ]; then
  echo $ME $VER
  exit 0
fi

fatal() {
  echo >&2 $ME: "$@"
  exit 1
}

COMMAND=$1
if [ -z "$COMMAND" ]; then
  fatal missing command
elif [ "$COMMAND" != "bash" -a "$COMMAND" != "up" -a "$COMMAND" != "down" ]; then
  fatal unrecognized command: $COMMAND
fi
shift

if [ "$COMMAND" == "bash" ]; then
  exec bash --login "$@"
  exit $?
fi

START_TIME=$(date +%s)

OPTSTRING=f:g:l:
LONGOPTS=compose-file:,subscription:,resource-group:,location:
if [ "$COMMAND" == "up" ]; then
  OPTSTRING=${OPTSTRING}e:
  LONGOPTS=$LONGOPTS,env-file:,env:
elif [ "$COMMAND" == "down" ]; then
  OPTSTRING=${OPTSTRING}dy
  LONGOPTS=$LONGOPTS,delete-group,no-wait,yes
fi
ARGS=$(getopt -n $ME -o $OPTSTRING -l $LONGOPTS -- "$@") || exit 1
eval set -- "$ARGS"
while true; do
  case "$1" in
    -f|--compose-file)   COMPOSE_FILE="$2"; shift;;
       --subscription)   SUBSCRIPTION="$2"; shift;;
    -g|--resource-group) RESOURCE_GROUP="$2"; shift;;
    -l|--location)       LOCATION="$2"; shift;;
       --env-file)       ENV_FILE=("$2"); shift;;
    -e|--env)            ENV+=("$2"); shift;;
    -d|--delete-group)   DELETE_GROUP=1;;
       --no-wait)        NO_WAIT=--no-wait;;
    -y|--yes)            YES=1;;
       --)               break;;
  esac
  shift
done

if [ -z "$COMPOSE_FILE" ]; then
  COMPOSE_FILE=cloud-compose.yml
  if [ ! -f "$COMPOSE_FILE" ]; then
    COMPOSE_FILE=cloud-compose.yaml
  fi
fi
if [ ! -f "$COMPOSE_FILE" ]; then
  fatal compose file \'$COMPOSE_FILE\' not found
fi

if [ -z "$SUBSCRIPTION" ]; then
  SUBSCRIPTION=$(az account show --query id -o tsv)
fi
if [ -z "$SUBSCRIPTION" ]; then
  fatal required option: subscription
fi

if [ -z "$RESOURCE_GROUP" ]; then
  # TODO: get any default resource group from az
  fatal required option: g, resource-group
fi

RG_LOCATION=$(az group show -n "$RESOURCE_GROUP" --query location -o tsv 2>/dev/null || echo -n)
if [ -z "$LOCATION" ]; then
  LOCATION="$RG_LOCATION"
fi

if [ -z "$RG_LOCATION" ]; then
  if [ -z "$LOCATION" ]; then
    echo Resource group \'$RESOURCE_GROUP\' does not exist
    fatal required option: l, location
  fi
  if [ "$COMMAND" == "up" ]; then
    echo Creating resource group \'$RESOURCE_GROUP\' in location \'$LOCATION\'...
    az group create -n "$RESOURCE_GROUP" -l "$LOCATION" > /dev/null
  fi
elif [ "$COMMAND" == "up" ]; then
  echo Using existing resource group \'$RESOURCE_GROUP\' and location \'$LOCATION\'
fi

if [ "$COMMAND" == "down" -a -z "$YES" ]; then
  ANSWER=unknown
  while [ "$ANSWER" != "" -a \
          "$ANSWER" != "Y" -a "$ANSWER" != "y" -a \
          "$ANSWER" != "N" -a "$ANSWER" != "n" ]; do
    echo -n Are you sure you want to compose down the services in \'$COMPOSE_FILE\'
    if [ -n "$DELETE_GROUP" -a -n "$RG_LOCATION" ]; then
      echo -n " "and delete resource group \'$RESOURCE_GROUP\'
    fi
    echo -n ? \(y/N\):" "
    read ANSWER
  done
  ANSWER=${ANSWER:-N}
  if [ "$ANSWER" == "N" -o "$ANSWER" == "n" ]; then
    echo >&2 Operation cancelled.
    exit 1
  fi
fi

hash() {
  HASH=$(echo -n /subscriptions/$SUBSCRIPTION/resourceGroups/$RESOURCE_GROUP/$1 | sha1sum)
  echo ${HASH::16}
}

-azp() {
  az "${@:2}" 3>&1 1>&2 2>&3 | while read err; do
    if [ "${err::9}" == "WARNING: " ]; then
      continue
    fi
    SKIP=
    for ((i=0; i<${#STDERR_FILTER[@]}; i++)); do
      if [ "${err::${#STDERR_FILTER[$i]}}" == "${STDERR_FILTER[$i]}" ]; then
        SKIP=1
        break
      fi
    done
    if [ -n "$SKIP" ]; then
      continue
    fi
    echo $1: $err
  done
  return $PIPESTATUS
}

azp() {
  if [ "$1" == "-q" ]; then
    shift
    -azp "$@" 3>&1 1>&2 2>/dev/null
  else
    -azp "$@" 3>&1 1>&2 2>&3
  fi
}

readenv() {
  while read line; do
    name=$(echo $line | sed s/=.*//)
    value=$(echo $line | sed s/^[^=]*=//)
    if [ -z "$name" ]; then
      continue
    fi
    eval $name\=\'${value//\'/\'\\\'\'}\'
  done < <(cat "$1" | sed '$a\')
}

since() {
  ELAPSED=$(($(date +%s) - $1))
  if [ $ELAPSED -eq 0 ]; then
    echo \<1s
  elif [ $ELAPSED -lt 60 ]; then
    echo ${ELAPSED}s
  else
    MINUTES=$((ELAPSED / 60))
    SECONDS=$((ELAPSED % 60))
    if [ $SECONDS -eq 0 ]; then
      echo ${MINUTES}m
    else
      echo ${MINUTES}m ${SECONDS}s
    fi
  fi
}

child-processes() {
  for id in $(pgrep -P $1); do
    echo $id
    child-processes $id
  done
}

trap 'kill $(child-processes $MY_PID) 2>/dev/null; exit 1' USR1
trap 'kill $(child-processes $MY_PID) 2>/dev/null; exit 130' INT
trap 'kill $(child-processes $MY_PID) 2>/dev/null; exit 143' TERM

if [ ! -f ".az-compose/$COMMAND" ]; then
  fatal missing $COMMAND implementation
fi
source .az-compose/$COMMAND

if [ "$COMMAND" == "down" -a -n "$DELETE_GROUP" -a -n "$RG_LOCATION" ]; then
  echo Deleting resource group \'$RESOURCE_GROUP\'...
  az group delete -n "$RESOURCE_GROUP" $NO_WAIT --yes
fi

echo Compose completed in $(since $START_TIME)