#!/bin/bash

# analyzer
# +cosmosdb
# +functionApp
# +storageAccount
# frontend
# GetImages
# GetUploadUrl
# imageMetadata
# images
# ResizeImage
# thumbnails

LANGUAGE=csharp
if [ "$COMPOSE_FILE" == "azure-compose.js.yaml" ]; then
  LANGUAGE=javascript
fi

#
# PHASE 0: BUILD
#

build-frontend() {
  echo Building \'frontend\' in \'www\'...
  cd www
  npm install
  npm run generate
  cd ..
}

# build-frontend

#
# PHASE 1: CREATE
#

PROPS=$(mktemp -d)
trap 'rm -rf $PROPS' EXIT

NAME_analyzer=analyzer-$(hash cognitiveService/analyzer@$LOCATION)
create-analyzer() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_analyzer"
  echo Creating \'analyzer\' as cognitive service \'$NAME\'...
  START_TIME=$(date +%s)
  STDERR_FILTER=("Microsoft will use ")
  URL=$(azp analyzer cognitiveservices account create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    -l "$LOCATION" \
    --kind ComputerVision \
    --sku F0 \
    --yes \
    --query endpoint \
    -o tsv)
  echo PROP_analyzer_url="$URL" >> $PROPS/analyzer
  KEY=$(azp analyzer cognitiveservices account keys list \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    --query key1 \
    -o tsv)
  echo PROP_analyzer_key="$KEY" >> $PROPS/analyzer
  echo Created \'analyzer\' as cognitive service \'$NAME\' in $(since $START_TIME)
}

NAME_default_cosmosdb=default-$(hash cosmosdb/default@$LOCATION)
create-default-cosmosdb() {
  NAME="$NAME_default_cosmosdb"
  echo Creating default Cosmos DB database account \'$NAME\'...
  START_TIME=$(date +%s)
  ENDPOINT=$(azp +cosmosdb cosmosdb create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    --query documentEndpoint \
    -o tsv)
  KEY=$(azp +cosmosdb cosmosdb list-keys \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    --query primaryMasterKey \
    -o tsv)
  echo PROP_default_cosmosdb_connectionString="AccountEndpoint=$ENDPOINT;AccountKey=$KEY;" >> $PROPS/default_cosmosdb
  echo Created default Cosmos DB database account \'$NAME\' in $(since $START_TIME)
}

NAME_default_functionApp=default-$(hash functionApp/default@$LOCATION)
create-default-functionApp() {
  NAME="$NAME_default_functionApp"
  echo Creating default function app \'$NAME\'...
  START_TIME=$(date +%s)
  DEFAULT_HOST_NAME=$(azp +functionApp functionapp create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    -c "$LOCATION" \
    -s "$NAME_default_storageAccount" \
    --query defaultHostName \
    -o tsv)
  echo PROP_default_functionApp_defaultHostName="$DEFAULT_HOST_NAME" >> $PROPS/default_functionApp
  echo Created default function app \'$NAME\' in $(since $START_TIME)
}

NAME_default_storageAccount=default$(hash storageAccount/default@$LOCATION)
create-default-storageAccount() {
  NAME="$NAME_default_storageAccount"
  echo Creating default storage account \'$NAME\'...
  START_TIME=$(date +%s)
  PRIMARY_ENDPOINTS_BLOB=$(azp +storageAccount storage account create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    -l "$LOCATION" \
    --kind StorageV2 \
    --https-only \
    --sku Standard_LRS \
    --query primaryEndpoints.blob \
    -o tsv)
  echo PROP_default_storageAccount_primaryEndpoints_blob="$(echo $PRIMARY_ENDPOINTS_BLOB | sed 's/\/$//')" >> $PROPS/default_storageAccount
  CONNECTION_STRING=$(azp +storageAccount storage account show-connection-string \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    --query connectionString \
    -o tsv)
  echo PROP_default_storageAccount_connectionString="$CONNECTION_STRING" >> $PROPS/default_storageAccount
  echo Created default storage account \'$NAME\' in $(since $START_TIME)
}

create-frontend() {
  echo Creating \'frontend\' as static website in storage account \'$NAME_default_storageAccount\'...
  START_TIME=$(date +%s)
  azp -q frontend storage blob service-properties update \
    --account-name "$NAME_default_storageAccount" \
    --static-website
  PRIMARY_ENDPOINT=$(azp frontend storage account show \
    -n "$NAME_default_storageAccount" \
    -g "$RESOURCE_GROUP" \
    --query primaryEndpoints.web \
    -o tsv)
  echo PROP_frontend_primaryEndpoint="$(echo $PRIMARY_ENDPOINT | sed 's/\/$//')" >> $PROPS/frontend
  echo PROP_frontend_account_connectionString="$PROP_default_storageAccount_connectionString" >> $PROPS/frontend
  echo Created \'frontend\' as static website in storage account \'$NAME_default_storageAccount\' in $(since $START_TIME)
}

NAME_GetImages=GetImages
create-GetImages() {
  NAME="$NAME_GetImages"
  echo Creating \'GetImages\' as function \'$NAME\' in function app \'$NAME_default_functionApp\'...
  START_TIME=$(date +%s)
  echo PROP_GetImages_app_defaultHostName="$PROP_default_functionApp_defaultHostName" >> $PROPS/GetImages
  echo PROP_GetImages_name="$NAME" >> $PROPS/GetImages
  echo Created \'GetImages\' as function \'$NAME\' in function app \'$NAME_default_functionApp\' in $(since $START_TIME)
}

NAME_GetUploadUrl=GetUploadUrl
create-GetUploadUrl() {
  NAME="$NAME_GetUploadUrl"
  echo Creating \'GetUploadUrl\' as function \'$NAME\' in function app \'$NAME_default_functionApp\'...
  START_TIME=$(date +%s)
  echo PROP_GetUploadUrl_app_defaultHostName="$PROP_default_functionApp_defaultHostName" >> $PROPS/GetUploadUrl
  echo PROP_GetUploadUrl_name="$NAME" >> $PROPS/GetUploadUrl
  echo Created \'GetUploadUrl\' as function \'$NAME\' in function app \'$NAME_default_functionApp\' in $(since $START_TIME)
}

NAME_imageMetadata=images
NAME_imageMetadata_database=imagesdb
create-imageMetadata() {
  NAME="$NAME_imageMetadata"
  NAME_database="$NAME_imageMetadata_database"
  NAME_database_account="$NAME_default_cosmosdb"
  echo Creating \'imageMetadata\' as collection \'$NAME\' in Cosmos DB database \'$NAME_database\' account \'$NAME_database_account\'...
  START_TIME=$(date +%s)
  echo PROP_imageMetadata_database_account_connectionString="$PROP_default_cosmosdb_connectionString" >> $PROPS/imageMetadata
  EXISTS=$(azp imageMetadata cosmosdb database exists \
    -n "$NAME_database_account" \
    -g "$RESOURCE_GROUP" \
    --db-name "$NAME_database" \
    -o tsv)
  if [ "$EXISTS" == "false" ]; then
    azp -q imageMetadata cosmosdb database create \
      -n "$NAME_database_account" \
      -g "$RESOURCE_GROUP" \
      --db-name "$NAME_database"
  fi
  echo PROP_imageMetadata_database_name="$NAME_database" >> $PROPS/imageMetadata
  EXISTS=$(azp imageMetadata cosmosdb collection exists \
    -n "$NAME_database_account" \
    -g "$RESOURCE_GROUP" \
    --db-name "$NAME_database" \
    --collection-name "$NAME" \
    -o tsv)
  if [ "$EXISTS" == "false" ]; then
    azp -q imageMetadata cosmosdb collection create \
      -n "$NAME_database_account" \
      -g "$RESOURCE_GROUP" \
      --db-name "$NAME_database" \
      --collection-name "$NAME" \
      --throughput 400
  fi
  echo PROP_imageMetadata_name="$NAME" >> $PROPS/imageMetadata
  echo Created \'imageMetadata\' as collection \'$NAME\' in Cosmos DB database \'$NAME_database\' account \'$NAME_database_account\' in $(since $START_TIME)
}

NAME_images=images
create-images() {
  NAME="$NAME_images"
  echo Creating \'images\' as container \'$NAME\' in storage account \'$NAME_default_storageAccount\'...
  START_TIME=$(date +%s)
  azp -q images storage container create \
    -n "$NAME" \
    --account-name "$NAME_default_storageAccount" \
    --public-access blob
  echo PROP_images_primaryEndpoint="$PROP_default_storageAccount_primaryEndpoints_blob" >> $PROPS/images
  echo PROP_images_account_connectionString="$PROP_default_storageAccount_connectionString" >> $PROPS/images
  echo PROP_images_name="$NAME_images" >> $PROPS/images
  echo Created \'images\' as container \'$NAME\' in storage account \'$NAME_default_storageAccount\' in $(since $START_TIME)
}

NAME_ResizeImage=ResizeImage
create-ResizeImage() {
  NAME="$NAME_ResizeImage"
  echo Creating \'ResizeImage\' as function \'$NAME\' in function app \'$NAME_default_functionApp\'...
  START_TIME=$(date +%s)
  echo PROP_ResizeImage_app_defaultHostName="$PROP_default_functionApp_defaultHostName" >> $PROPS/ResizeImage
  echo PROP_ResizeImage_name="$NAME" >> $PROPS/ResizeImage
  echo Created \'ResizeImage\' as function \'$NAME\' in function app \'$NAME_default_functionApp\' in $(since $START_TIME)
}

NAME_thumbnails=thumbnails
create-thumbnails() {
  NAME="$NAME_thumbnails"
  echo Creating \'thumbnails\' as container \'$NAME\' in storage account \'$NAME_default_storageAccount\'...
  START_TIME=$(date +%s)
  azp -q thumbnails storage container create \
    -n "$NAME" \
    --account-name "$NAME_default_storageAccount" \
    --public-access blob
  echo PROP_thumbnails_primaryEndpoint="$PROP_default_storageAccount_primaryEndpoints_blob" >> $PROPS/thumbnails
  echo PROP_thumbnails_account_connectionString="$PROP_default_storageAccount_connectionString" >> $PROPS/thumbnails
  echo PROP_thumbnails_name="$NAME_thumbnails" >> $PROPS/thumbnails
  echo Created \'thumbnails\' as container \'$NAME\' in storage account \'$NAME_default_storageAccount\' in $(since $START_TIME)
}

# Creation dependencies:
# - analyzer
# - +cosmosdb
# - +functionApp <- +storageAccount
# - +storageAccount
# - frontend <- +storageAccount
# - GetImages <- +functionApp
# - GetUploadUrl <- +functionApp
# - imageMetadata <- +cosmosdb
# - images <- +storageAccount
# - ResizeImage <- +functionApp
# - thumbnails <- +storageAccount

create-analyzer & PID_create_analyzer=$!
sleep 0.1
create-default-cosmosdb & PID_create_default_cosmosdb=$!
sleep 0.1
create-default-storageAccount & PID_create_default_storageAccount=$!
sleep 0.1
wait $PID_create_default_storageAccount && readenv $PROPS/default_storageAccount
create-default-functionApp & PID_create_default_functionApp=$!
sleep 0.1
create-frontend & PID_create_frontend=$!
sleep 0.1
create-images & PID_create_images=$!
sleep 0.1
create-thumbnails & PID_create_thumbnails=$!
sleep 0.1
wait $PID_create_default_functionApp && readenv $PROPS/default_functionApp
create-GetImages & PID_create_GetImages=$!
sleep 0.1
create-GetUploadUrl & PID_create_GetUploadUrl=$!
sleep 0.1
create-ResizeImage & PID_create_ResizeImage=$!
sleep 0.1
wait $PID_create_default_cosmosdb && readenv $PROPS/default_cosmosdb
create-imageMetadata & PID_create_imageMetadata=$!
wait
readenv $PROPS/analyzer
readenv $PROPS/frontend
readenv $PROPS/GetImages
readenv $PROPS/GetUploadUrl
readenv $PROPS/imageMetadata
readenv $PROPS/images
readenv $PROPS/ResizeImage
readenv $PROPS/thumbnails
set | grep "^PROP_"
exit 0

#
# PHASE 2: CONFIGURE
#

configure-default-functionApp() {
  NAME="$NAME_default_functionApp"
  echo Configuring default function app...
  START_TIME=$(date +%s)
  APP_ID=$(azp +functionApp ad app list \
    --identifier-uri "https://$PROP_default_functionApp_defaultHostName" \
    --query '[].appId' \
    -o tsv)
  if [ -z "$APP_ID" ]; then
    APP_ID=$(azp +functionApp ad app create \
      --display-name "First Serverless Web Application" \
      --homepage "https://$PROP_default_functionApp_defaultHostName" \
      --identifier-uris "https://$PROP_default_functionApp_defaultHostName" \
      --reply-urls "https://$PROP_default_functionApp_defaultHostName/.auth/login/aad/callback" \
      --required-resource-accesses '[{
        "resourceAppId": "00000002-0000-0000-c000-000000000000",
        "resourceAccess": [
          {
            "id": "311a71cc-e848-46a1-bdf8-97ff7156d8e6",
            "type": "Scope"
          }
        ]
      }]' \
      --query appId \
      -o tsv)
  fi
  FUNCTIONAPP_AUTH_ENABLE=$(mktemp)
  trap 'rm -f $FUNCTIONAPP_AUTH_ENABLE' EXIT
  cat << EOF > $FUNCTIONAPP_AUTH_ENABLE
.properties.enabled = true |
.properties.runtimeVersion = "1.0.0" |
.properties.unauthenticatedClientAction = "RedirectToLoginPage" |
.properties.tokenStoreEnabled = true |
.properties.allowedExternalRedirectUrls = [ "$PROP_frontend_primaryEndpoint" ] |
.properties.defaultProvider = "AzureActiveDirectory" |
.properties.clientId = "$APP_ID" |
.properties.issuer = "https://sts.windows.net/$(az account show --query tenantId -o tsv)/" |
.properties.allowedAudiences = [ "https://$PROP_default_functionApp_defaultHostName/.auth/login/aad/callback" ] |
.properties.isAadAutoProvisioned = true
EOF
  azp +functionApp resource invoke-action \
    -g "$RESOURCE_GROUP" \
    --namespace Microsoft.Web \
    --parent "sites/$NAME" \
    --resource-type config \
    -n authsettings \
    --action list \
    --api-version 2018-02-01 \
    -o tsv | \
  jq "$(cat $FUNCTIONAPP_AUTH_ENABLE)" | \
  azp -q +functionApp resource create \
    -g "$RESOURCE_GROUP" \
    --namespace Microsoft.Web \
    --parent "sites/$NAME" \
    --resource-type config \
    -n authsettings \
    --api-version 2018-02-01 \
    --is-full-object \
    --properties @/dev/stdin
  azp -q +functionApp resource update \
    -g "$RESOURCE_GROUP" \
    --namespace Microsoft.Web \
    --parent "sites/$NAME" \
    --resource-type config \
    -n web \
    --api-version 2015-06-01 \
    --set properties.cors.allowedOrigins="['"$PROP_frontend_primaryEndpoint"']"
  echo Configured default function app in $(since $START_TIME)
}

configure-default-storageAccount() {
  NAME="$NAME_default_storageAccount"
  echo Configuring default storage account...
  START_TIME=$(date +%s)
  azp -q +storageAccount storage cors clear \
    --account-name "$NAME" \
    --services b
  azp -q +storageAccount storage cors add \
    --account-name "$NAME" \
    --services b \
    --methods OPTIONS PUT \
    --origins "$PROP_frontend_primaryEndpoint" \
    --allowed-headers '*' \
    --exposed-headers '*'
  echo Configured default storage account in $(since $START_TIME)
}

configure-default-functionApp &
sleep 0.1
configure-default-storageAccount &
wait

#
# PHASE 3: BIND
#

bind-default-functionApp() {
  NAME="$NAME_default_functionApp"
  echo Binding \'GetImages\' function to \'imageMetadata\' Cosmos DB collection...
  echo Binding \'GetUploadUrl\' function to \'images\' storage container...
  echo Binding \'ResizeImage\' function to \'analyzer\' cognitive service...
  echo Binding \'ResizeImage\' function to \'imageMetadata\' Cosmos DB collection...
  echo Binding \'ResizeImage\' function to \'images\' storage container...
  echo Binding \'ResizeImage\' function to \'thumbnails\' storage container...
  START_TIME=$(date +%s)
  if [ "$LANGUAGE" == "javascript" ]; then
    ENABLE_BUILD="SCM_DO_BUILD_DURING_DEPLOYMENT=true"
  fi
  azp -q +functionApp functionapp config appsettings set -n "$NAME" -g "$RESOURCE_GROUP" --settings $ENABLE_BUILD \
    "ANALYZER_URL=$PROP_analyzer_url" \
    "ANALYZER_KEY=$PROP_analyzer_key" \
    "IMAGE_METADATA_DATABASE_ACCOUNT_CONNECTION_STRING=$PROP_imageMetadata_database_account_connectionString" \
    "IMAGE_METADATA_DATABASE_NAME=$PROP_imageMetadata_database_name" \
    "IMAGE_METADATA_NAME=$PROP_imageMetadata_name" \
    "IMAGES_ACCOUNT_CONNECTION_STRING=$PROP_images_account_connectionString" \
    "IMAGES_NAME=$PROP_images_name" \
    "THUMBNAILS_ACCOUNT_CONNECTION_STRING=$PROP_thumbnails_account_connectionString" \
    "THUMBNAILS_NAME=$PROP_thumbnails_name"
  echo Bound \'GetImages\' function to \'imageMetadata\' Cosmos DB collection in $(since $START_TIME)
  echo Bound \'GetUploadUrl\' function to \'images\' storage container in $(since $START_TIME)
  echo Bound \'ResizeImage\' function to \'analyzer\' cognitive service in $(since $START_TIME)
  echo Bound \'ResizeImage\' function to \'imageMetadata\' Cosmos DB collection in $(since $START_TIME)
  echo Bound \'ResizeImage\' function to \'images\' storage container in $(since $START_TIME)
  echo Bound \'ResizeImage\' function to \'thumbnails\' storage container in $(since $START_TIME)
}

bind-frontend() {
  echo Binding \'frontend\' static website to default function app...
  echo Binding \'frontend\' static website to \'images\' storage container...
  START_TIME=$(date +%s)
  echo 'window.settings = {}' > www/dist/settings.js
  echo 'window.settings.default = {}' >> www/dist/settings.js
  echo 'window.settings.default.functionApp = { defaultHostName: "'$PROP_default_functionApp_defaultHostName'" }' >> www/dist/settings.js
  echo 'window.settings.images = { primaryEndpoint: "'$PROP_images_primaryEndpoint'" }' >> www/dist/settings.js
  echo Bound \'frontend\' static website to default function app in $(since $START_TIME)
  echo Bound \'frontend\' static website to \'images\' storage container in $(since $START_TIME)
}

bind-default-functionApp &
sleep 0.1
bind-frontend &
wait

#
# PHASE 4: PUSH
#

push-default-functionApp() {
  echo Pushing \'GetImages\' source to function app \'$NAME_default_functionApp\'...
  echo Pushing \'GetUploadUrl\' source to function app \'$NAME_default_functionApp\'...
  echo Pushing \'ResizeImage\' source to function app \'$NAME_default_functionApp\'...
  local START_TIME=$(date +%s)
  PACKAGE_DIR=$(mktemp -d)
  ZIP_FILE=$(mktemp -u).zip
  trap 'rm -rf $PACKAGE_DIR; rm -f $ZIP_FILE' EXIT
  if [ "$LANGUAGE" == "javascript" ]; then
    cp -R "$LANGUAGE/site/"* $PACKAGE_DIR
  fi
  cp -R "$LANGUAGE/GetImages" $PACKAGE_DIR
  cp -R "$LANGUAGE/GetUploadUrl" $PACKAGE_DIR
  cp -R "$LANGUAGE/ResizeImage" $PACKAGE_DIR
  (cd $PACKAGE_DIR && zip -r $ZIP_FILE .)
  az functionapp deployment source config-zip \
    -n "$NAME_default_functionApp" \
    -g "$RESOURCE_GROUP" \
    --src $ZIP_FILE \
    --query message \
    -o tsv
  echo Pushed \'GetImages\' source to function app \'$NAME_default_functionApp\' in $(since $START_TIME)
  echo Pushed \'GetUploadUrl\' source to function app \'$NAME_default_functionApp\' in $(since $START_TIME)
  echo Pushed \'ResizeImage\' source to function app \'$NAME_default_functionApp\' in $(since $START_TIME)
}

push-frontend() {
  echo Pushing \'frontend\' content to static website in storage account \'$NAME_default_storageAccount\'...
  local START_TIME=$(date +%s)
  echo 'window.settings.authEnabled = true' >> www/dist/settings.js
  az storage blob upload-batch \
    --account-name "$NAME_default_storageAccount" \
    --source www/dist \
    --destination \$web \
    --query [].blob \
    -o tsv
  az storage blob service-properties update \
    --account-name "$NAME_default_storageAccount" \
    --index-document index.html
  echo Pushed \'frontend\' content to static website in storage account \'$NAME_default_storageAccount\' in $(since $START_TIME)
}

push-default-functionApp
push-frontend

#
# COMPLETION
#

echo
echo endpoints:
echo " +functionApp: https://$PROP_default_functionApp_defaultHostName"
echo "  frontend:    $PROP_frontend_primaryEndpoint"
echo
