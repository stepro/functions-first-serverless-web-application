#!/bin/bash

# default:cosmosDB.account
# default:storage.account
# mybackend.analyzer
# mybackend.GetImages
# mybackend.GetUploadUrl
# mybackend.imageMetadata
# mybackend.images
# mybackend.myfunctions
# mybackend.ResizeImage
# mybackend.thumbnails
# myfrontend

LANGUAGE=csharp
if [ "$COMPOSE_FILE" == "cloud-compose.js.yaml" ]; then
  LANGUAGE=javascript
fi

#
# PHASE 0: BUILD
#

build-frontend() {
  echo Building \'frontend\' in \'www\'...
  cd www
  npm install
  npm run generate
  cd ..
}

# build-frontend

#
# PHASE 1: CREATE
#

NAME_default_cosmosDB_account=default-$(hash cosmosDB.account/default@$LOCATION)
NAME_default_storage_account=default$(hash storage.account/default@$LOCATION)
NAME_mybackend_analyzer=analyzer-$(hash cognitive.vision/mybackend.analyzer@$LOCATION)
NAME_mybackend_GetImages=GetImages
NAME_mybackend_GetUploadUrl=GetUploadUrl
NAME_mybackend_imageMetadata=images
NAME_mybackend_imageMetadata_database=imagesdb
NAME_mybackend_images=images
NAME_mybackend_myfunctions=myfunctions-$(hash function.app/mybackend.myfunctions@$LOCATION)
NAME_mybackend_ResizeImage=ResizeImage
NAME_mybackend_thumbnails=thumbnails

PROPS=$(mktemp -d)
trap 'rm -rf $PROPS' EXIT

create-default-cosmosDB-account() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_default_cosmosDB_account"
  echo Creating default Cosmos DB account \'$NAME\'...
  START_TIME=$(date +%s)
  ENDPOINT=$(azp default:cosmosDB.account cosmosdb create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    --query documentEndpoint \
    -o tsv)
  KEY=$(azp default:cosmosDB.account cosmosdb list-keys \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    --query primaryMasterKey \
    -o tsv)
  echo PROP_default_cosmosDB_account_connectionString="AccountEndpoint=$ENDPOINT;AccountKey=$KEY;" >> $PROPS/default:cosmosDB.account
  echo Created default Cosmos DB account \'$NAME\' in $(since $START_TIME)
}

create-default-storage-account() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_default_storage_account"
  echo Creating default storage account \'$NAME\'...
  START_TIME=$(date +%s)
  PRIMARY_ENDPOINTS_BLOB=$(azp default:storage.account storage account create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    -l "$LOCATION" \
    --kind StorageV2 \
    --https-only \
    --sku Standard_LRS \
    --query primaryEndpoints.blob \
    -o tsv)
  echo PROP_default_storage_account_primaryEndpoints_blob="$(echo $PRIMARY_ENDPOINTS_BLOB | sed 's/\/$//')" >> $PROPS/default:storage.account
  CONNECTION_STRING=$(azp default:storage.account storage account show-connection-string \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    --query connectionString \
    -o tsv)
  echo PROP_default_storage_account_connectionString="$CONNECTION_STRING" >> $PROPS/default:storage.account
  echo Created default storage account \'$NAME\' in $(since $START_TIME)
}

create-mybackend-analyzer() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_mybackend_analyzer"
  echo Creating \'mybackend.analyzer\' as vision cognitive service \'$NAME\'...
  START_TIME=$(date +%s)
  STDERR_FILTER=("Microsoft will use ")
  ENDPOINT=$(azp mybackend.analyzer cognitiveservices account create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    -l "$LOCATION" \
    --kind ComputerVision \
    --sku F0 \
    --yes \
    --query endpoint \
    -o tsv)
  echo PROP_mybackend_analyzer_endpoint="$ENDPOINT" >> $PROPS/mybackend.analyzer
  KEY=$(azp mybackend.analyzer cognitiveservices account keys list \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    --query key1 \
    -o tsv)
  echo PROP_mybackend_analyzer_key="$KEY" >> $PROPS/mybackend.analyzer
  echo Created \'mybackend.analyzer\' as vision cognitive service \'$NAME\' in $(since $START_TIME)
}

create-mybackend-GetImages() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_mybackend_GetImages"
  echo Creating \'mybackend.GetImages\' as function \'$NAME\' in default function app \'$NAME_mybackend_myfunctions\'...
  START_TIME=$(date +%s)
  echo PROP_mybackend_GetImages_app_defaultHostName="$PROP_mybackend_myfunctions_defaultHostName" >> $PROPS/mybackend.GetImages
  echo PROP_mybackend_GetImages_name="$NAME" >> $PROPS/mybackend.GetImages
  echo Created \'mybackend.GetImages\' as function \'$NAME\' in default function app \'$NAME_mybackend_myfunctions\' in $(since $START_TIME)
}

create-mybackend-GetUploadUrl() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_mybackend_GetUploadUrl"
  echo Creating \'mybackend.GetUploadUrl\' as function \'$NAME\' in default function app \'$NAME_mybackend_myfunctions\'...
  START_TIME=$(date +%s)
  echo PROP_mybackend_GetUploadUrl_app_defaultHostName="$PROP_mybackend_myfunctions_defaultHostName" >> $PROPS/mybackend.GetUploadUrl
  echo PROP_mybackend_GetUploadUrl_name="$NAME" >> $PROPS/mybackend.GetUploadUrl
  echo Created \'mybackend.GetUploadUrl\' as function \'$NAME\' in default function app \'$NAME_mybackend_myfunctions\' in $(since $START_TIME)
}

create-mybackend-imageMetadata() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_mybackend_imageMetadata"
  NAME_database="$NAME_mybackend_imageMetadata_database"
  NAME_database_account="$NAME_default_cosmosDB_account"
  echo Creating \'mybackend.imageMetadata\' as collection \'$NAME\' in Cosmos DB database \'$NAME_database\' with default account \'$NAME_database_account\'...
  START_TIME=$(date +%s)
  echo PROP_mybackend_imageMetadata_database_account_connectionString="$PROP_default_cosmosDB_account_connectionString" >> $PROPS/mybackend.imageMetadata
  EXISTS=$(azp mybackend.imageMetadata cosmosdb database exists \
    -n "$NAME_database_account" \
    -g "$RESOURCE_GROUP" \
    --db-name "$NAME_database" \
    -o tsv)
  if [ "$EXISTS" == "false" ]; then
    azp -q mybackend.imageMetadata cosmosdb database create \
      -n "$NAME_database_account" \
      -g "$RESOURCE_GROUP" \
      --db-name "$NAME_database"
  fi
  echo PROP_mybackend_imageMetadata_database_name="$NAME_database" >> $PROPS/mybackend.imageMetadata
  EXISTS=$(azp mybackend.imageMetadata cosmosdb collection exists \
    -n "$NAME_database_account" \
    -g "$RESOURCE_GROUP" \
    --db-name "$NAME_database" \
    --collection-name "$NAME" \
    -o tsv)
  if [ "$EXISTS" == "false" ]; then
    azp -q mybackend.imageMetadata cosmosdb collection create \
      -n "$NAME_database_account" \
      -g "$RESOURCE_GROUP" \
      --db-name "$NAME_database" \
      --collection-name "$NAME" \
      --throughput 400
  fi
  echo PROP_mybackend_imageMetadata_name="$NAME" >> $PROPS/mybackend.imageMetadata
  echo Created \'mybackend.imageMetadata\' as collection \'$NAME\' in Cosmos DB database \'$NAME_database\' with default account \'$NAME_database_account\' in $(since $START_TIME)
}

create-mybackend-images() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_mybackend_images"
  echo Creating \'mybackend.images\' as container \'$NAME\' in default storage account \'$NAME_default_storage_account\'...
  START_TIME=$(date +%s)
  azp -q mybackend.images storage container create \
    -n "$NAME" \
    --account-name "$NAME_default_storage_account" \
    --public-access blob
  echo PROP_mybackend_images_primaryEndpoint="$PROP_default_storage_account_primaryEndpoints_blob" >> $PROPS/mybackend.images
  echo PROP_mybackend_images_account_connectionString="$PROP_default_storage_account_connectionString" >> $PROPS/mybackend.images
  echo PROP_mybackend_images_name="$NAME_mybackend_images" >> $PROPS/mybackend.images
  echo Created \'mybackend.images\' as container \'$NAME\' in default storage account \'$NAME_default_storage_account\' in $(since $START_TIME)
}

create-mybackend-myfunctions() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_mybackend_myfunctions"
  echo Creating \'mybackend.myfunctions\' as default function app \'$NAME\'...
  START_TIME=$(date +%s)
  HOSTNAME=$(azp mybackend.myfunctions functionapp create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    -c "$LOCATION" \
    -s "$NAME_default_storage_account" \
    --query defaultHostName \
    -o tsv)
  echo PROP_mybackend_myfunctions_defaultHostName="$HOSTNAME" >> $PROPS/mybackend.myfunctions
  echo Created \'mybackend.myfunctions\' as default function app \'$NAME\' in $(since $START_TIME)
}

create-mybackend-ResizeImage() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_mybackend_ResizeImage"
  echo Creating \'mybackend.ResizeImage\' as function \'$NAME\' in default function app \'$NAME_mybackend_myfunctions\'...
  START_TIME=$(date +%s)
  echo PROP_mybackend_ResizeImage_app_defaultHostName="$PROP_mybackend_myfunctions_defaultHostName" >> $PROPS/mybackend.ResizeImage
  echo PROP_mybackend_ResizeImage_name="$NAME" >> $PROPS/mybackend.ResizeImage
  echo Created \'mybackend.ResizeImage\' as function \'$NAME\' in default function app \'$NAME_mybackend_myfunctions\' in $(since $START_TIME)
}

create-mybackend-thumbnails() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_mybackend_thumbnails"
  echo Creating \'mybackend.thumbnails\' as container \'$NAME\' in default storage account \'$NAME_default_storage_account\'...
  START_TIME=$(date +%s)
  azp -q mybackend.thumbnails storage container create \
    -n "$NAME" \
    --account-name "$NAME_default_storage_account" \
    --public-access blob
  echo PROP_mybackend_thumbnails_primaryEndpoint="$PROP_default_storage_account_primaryEndpoints_blob" >> $PROPS/mybackend.thumbnails
  echo PROP_mybackend_thumbnails_account_connectionString="$PROP_default_storage_account_connectionString" >> $PROPS/mybackend.thumbnails
  echo PROP_mybackend_thumbnails_name="$NAME_mybackend_thumbnails" >> $PROPS/mybackend.thumbnails
  echo Created \'mybackend.thumbnails\' as container \'$NAME\' in default storage account \'$NAME_default_storage_account\' in $(since $START_TIME)
}

create-myfrontend() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  echo Creating \'myfrontend\' as website in default storage account \'$NAME_default_storage_account\'...
  START_TIME=$(date +%s)
  azp -q myfrontend storage blob service-properties update \
    --account-name "$NAME_default_storage_account" \
    --static-website
  PRIMARY_ENDPOINT=$(azp myfrontend storage account show \
    -n "$NAME_default_storage_account" \
    -g "$RESOURCE_GROUP" \
    --query primaryEndpoints.web \
    -o tsv)
  echo PROP_myfrontend_primaryEndpoint="$(echo $PRIMARY_ENDPOINT | sed 's/\/$//')" >> $PROPS/myfrontend
  echo Created \'myfrontend\' as website in default storage account \'$NAME_default_storage_account\' in $(since $START_TIME)
}

# default:cosmosDB.account
# default:storage.account
# mybackend.analyzer
# mybackend.GetImages <- mybackend.myfunctions
# mybackend.GetUploadUrl <- mybackend.myfunctions
# mybackend.imageMetadata <- default:cosmosDB.account
# mybackend.images <- default:storage.account
# mybackend.myfunctions <- default:storage.account
# mybackend.ResizeImage <- mybackend.myfunctions
# mybackend.thumbnails <- default:storage.account
# myfrontend <- default:storage.account

create-default-cosmosDB-account & PID_create_default_cosmosDB_account=$!
sleep 0.1
create-default-storage-account & PID_create_default_storage_account=$!
sleep 0.1
create-mybackend-analyzer & PID_create_mybackend_analyzer=$!
sleep 0.1
wait $PID_create_default_storage_account && readenv $PROPS/default:storage.account
create-mybackend-images & PID_create_mybackend_images=$!
sleep 0.1
create-mybackend-myfunctions & PID_create_mybackend_myfunctions=$!
sleep 0.1
create-mybackend-thumbnails & PID_create_mybackend_thumbnails=$!
sleep 0.1
create-myfrontend & PID_create_myfrontend=$!
sleep 0.1
wait $PID_create_mybackend_myfunctions && readenv $PROPS/mybackend.myfunctions
create-mybackend-GetImages & PID_create_mybackend_GetImages=$!
sleep 0.1
create-mybackend-GetUploadUrl & PID_create_mybackend_GetUploadUrl=$!
sleep 0.1
create-mybackend-ResizeImage & PID_create_mybackend_ResizeImage=$!
sleep 0.1
wait $PID_create_default_cosmosDB_account && readenv $PROPS/default:cosmosDB.account
create-mybackend-imageMetadata & PID_create_mybackend_imageMetadata=$!
wait
readenv $PROPS/mybackend.analyzer
readenv $PROPS/mybackend.GetImages
readenv $PROPS/mybackend.GetUploadUrl
readenv $PROPS/mybackend.imageMetadata
readenv $PROPS/mybackend.images
readenv $PROPS/mybackend.ResizeImage
readenv $PROPS/mybackend.thumbnails
readenv $PROPS/myfrontend

#
# PHASE 2: CONFIGURE
#

configure-default-storage-account() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_default_storage_account"
  echo Configuring default storage account \'$NAME\'...
  START_TIME=$(date +%s)
  azp -q default:storage.account storage cors clear \
    --account-name "$NAME" \
    --services b
  azp -q default:storage.account storage cors add \
    --account-name "$NAME" \
    --services b \
    --methods OPTIONS GET PUT \
    --origins "$PROP_myfrontend_primaryEndpoint" \
    --allowed-headers '*' \
    --exposed-headers '*'
  echo Configured default storage account \'$NAME\' in $(since $START_TIME)
}

configure-mybackend-myfunctions() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_mybackend_myfunctions"
  echo Configuring default function app \'$NAME\'...
  START_TIME=$(date +%s)
  APP_ID=$(azp mybackend.myfunctions ad app list \
    --identifier-uri "https://$PROP_mybackend_myfunctions_defaultHostName" \
    --query '[].appId' \
    -o tsv)
  if [ -z "$APP_ID" ]; then
    AAD_DISPLAY_NAME="First Serverless Web Application"
    echo Creating Azure Active Directory application \'$AAD_DISPLAY_NAME\'...
    AAD_START_TIME=$(date +%s)
    APP_ID=$(azp mybackend.myfunctions ad app create \
      --display-name "$AAD_DISPLAY_NAME" \
      --homepage "https://$PROP_mybackend_myfunctions_defaultHostName" \
      --identifier-uris "https://$PROP_mybackend_myfunctions_defaultHostName" \
      --reply-urls "https://$PROP_mybackend_myfunctions_defaultHostName/.auth/login/aad/callback" \
      --required-resource-accesses '[{
        "resourceAppId": "00000003-0000-0000-c000-000000000000",
        "resourceAccess": [
          {
            "id": "e1fe6dd8-ba31-4d61-89e7-88639da4683d",
            "type": "Scope"
          }
        ]
      }]' \
      --query appId \
      -o tsv)
    echo Created Azure Active Directory application \'$AAD_DISPLAY_NAME\' in $(since $AAD_START_TIME)
  fi
  FUNCTIONAPP_AUTH_ENABLE=$(mktemp)
  trap 'rm -f $FUNCTIONAPP_AUTH_ENABLE' EXIT
  cat << EOF > $FUNCTIONAPP_AUTH_ENABLE
.properties.enabled = true |
.properties.runtimeVersion = "1.0.0" |
.properties.unauthenticatedClientAction = "RedirectToLoginPage" |
.properties.tokenStoreEnabled = true |
.properties.allowedExternalRedirectUrls = [ "$PROP_myfrontend_primaryEndpoint" ] |
.properties.defaultProvider = "AzureActiveDirectory" |
.properties.clientId = "$APP_ID" |
.properties.issuer = "https://sts.windows.net/$(az account show --query tenantId -o tsv)/" |
.properties.allowedAudiences = [ "https://$PROP_mybackend_myfunctions_defaultHostName/.auth/login/aad/callback" ] |
.properties.isAadAutoProvisioned = true
EOF
  azp mybackend.myfunctions resource invoke-action \
    -g "$RESOURCE_GROUP" \
    --namespace Microsoft.Web \
    --parent "sites/$NAME" \
    --resource-type config \
    -n authsettings \
    --action list \
    --api-version 2018-02-01 \
    -o tsv | \
  jq "$(cat $FUNCTIONAPP_AUTH_ENABLE)" | \
  azp -q mybackend.myfunctions resource create \
    -g "$RESOURCE_GROUP" \
    --namespace Microsoft.Web \
    --parent "sites/$NAME" \
    --resource-type config \
    -n authsettings \
    --api-version 2018-02-01 \
    --is-full-object \
    --properties @/dev/stdin
  azp -q mybackend.myfunctions resource update \
    -g "$RESOURCE_GROUP" \
    --namespace Microsoft.Web \
    --parent "sites/$NAME" \
    --resource-type config \
    -n web \
    --api-version 2015-06-01 \
    --set properties.cors.allowedOrigins="['"$PROP_myfrontend_primaryEndpoint"']"
  echo Configured default function app \'$NAME\' in $(since $START_TIME)
}

configure-default-storage-account &
sleep 0.1
configure-mybackend-myfunctions &
wait

#
# PHASE 3: BIND
#

bind-mybackend-myfunctions() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  NAME="$NAME_mybackend_myfunctions"
  echo Binding \'mybackend.GetImages\' function to \'mybackend.imageMetadata\' Cosmos DB collection...
  echo Binding \'mybackend.GetUploadUrl\' function to \'mybackend.images\' storage container...
  echo Binding \'mybackend.ResizeImage\' function to \'mybackend.analyzer\' vision cognitive service...
  echo Binding \'mybackend.ResizeImage\' function to \'mybackend.imageMetadata\' Cosmos DB collection...
  echo Binding \'mybackend.ResizeImage\' function to \'mybackend.images\' storage container...
  echo Binding \'mybackend.ResizeImage\' function to \'mybackend.thumbnails\' storage container...
  START_TIME=$(date +%s)
  if [ "$LANGUAGE" == "javascript" ]; then
    ENABLE_BUILD="SCM_DO_BUILD_DURING_DEPLOYMENT=true"
  fi
  azp -q mybackend.myfunctions functionapp config appsettings set -n "$NAME" -g "$RESOURCE_GROUP" --settings $ENABLE_BUILD \
    "ANALYZER_ENDPOINT=$PROP_mybackend_analyzer_endpoint" \
    "ANALYZER_KEY=$PROP_mybackend_analyzer_key" \
    "FUNCTIONS_EXTENSION_VERSION=~1" \
    "IMAGE_METADATA_DATABASE_ACCOUNT_CONNECTION_STRING=$PROP_mybackend_imageMetadata_database_account_connectionString" \
    "IMAGE_METADATA_DATABASE_NAME=$PROP_mybackend_imageMetadata_database_name" \
    "IMAGE_METADATA_NAME=$PROP_mybackend_imageMetadata_name" \
    "IMAGES_ACCOUNT_CONNECTION_STRING=$PROP_mybackend_images_account_connectionString" \
    "IMAGES_NAME=$PROP_mybackend_images_name" \
    "THUMBNAILS_ACCOUNT_CONNECTION_STRING=$PROP_mybackend_thumbnails_account_connectionString" \
    "THUMBNAILS_NAME=$PROP_mybackend_thumbnails_name"
  echo Waiting for default function app \'$NAME\' to apply settings...
  sleep 5
  echo Bound \'mybackend.GetImages\' function to \'mybackend.imageMetadata\' Cosmos DB collection in $(since $START_TIME)
  echo Bound \'mybackend.GetUploadUrl\' function to \'mybackend.images\' storage container in $(since $START_TIME)
  echo Bound \'mybackend.ResizeImage\' function to \'mybackend.analyzer\' vision cognitive service in $(since $START_TIME)
  echo Bound \'mybackend.ResizeImage\' function to \'mybackend.imageMetadata\' Cosmos DB collection in $(since $START_TIME)
  echo Bound \'mybackend.ResizeImage\' function to \'mybackend.images\' storage container in $(since $START_TIME)
  echo Bound \'mybackend.ResizeImage\' function to \'mybackend.thumbnails\' storage container in $(since $START_TIME)
}

bind-myfrontend() {
  trap '[ "$?" -eq 0 ] || kill -USR1 $MY_PID' EXIT
  echo Binding \'myfrontend\' storage website to \'mybackend.myfunctions\' function app...
  echo Binding \'myfrontend\' storage website to \'mybackend.images\' storage container...
  START_TIME=$(date +%s)
  echo 'window.settings = {}' > www/dist/settings.js
  echo 'window.settings.mybackend = {}' >> www/dist/settings.js
  echo 'window.settings.mybackend.myfunctions = { defaultHostName: "'$PROP_mybackend_myfunctions_defaultHostName'" }' >> www/dist/settings.js
  echo 'window.settings.mybackend.images = { primaryEndpoint: "'$PROP_mybackend_images_primaryEndpoint'" }' >> www/dist/settings.js
  echo Bound \'myfrontend\' storage website to \'mybackend.myfunctions\' function app in $(since $START_TIME)
  echo Bound \'myfrontend\' storage website to \'mybackend.images\' storage container in $(since $START_TIME)
}

bind-mybackend-myfunctions &
sleep 0.1
bind-myfrontend &
wait

#
# PHASE 4: PUSH
#

push-mybackend-myfunctions() {
  echo Pushing \'GetImages\' source to default function app \'$NAME_mybackend_myfunctions\'...
  echo Pushing \'GetUploadUrl\' source to default function app \'$NAME_mybackend_myfunctions\'...
  echo Pushing \'ResizeImage\' source to default function app \'$NAME_mybackend_myfunctions\'...
  local START_TIME=$(date +%s)
  PACKAGE_DIR=$(mktemp -d)
  ZIP_FILE=$(mktemp -u).zip
  trap 'rm -rf $PACKAGE_DIR; rm -f $ZIP_FILE' EXIT
  if [ "$LANGUAGE" == "javascript" ]; then
    cp -R "$LANGUAGE/site/"* $PACKAGE_DIR
  fi
  cp -R "$LANGUAGE/GetImages" $PACKAGE_DIR
  cp -R "$LANGUAGE/GetUploadUrl" $PACKAGE_DIR
  cp -R "$LANGUAGE/ResizeImage" $PACKAGE_DIR
  (cd $PACKAGE_DIR && zip -r $ZIP_FILE .)
  az functionapp deployment source config-zip \
    -n "$NAME_mybackend_myfunctions" \
    -g "$RESOURCE_GROUP" \
    --src $ZIP_FILE \
    --query message \
    -o tsv
  echo Pushed \'GetImages\' source to default function app \'$NAME_mybackend_myfunctions\' in $(since $START_TIME)
  echo Pushed \'GetUploadUrl\' source to default function app \'$NAME_mybackend_myfunctions\' in $(since $START_TIME)
  echo Pushed \'ResizeImage\' source to default function app \'$NAME_mybackend_myfunctions\' in $(since $START_TIME)
}

push-myfrontend() {
  echo Pushing \'myfrontend\' content to website in default storage account \'$NAME_default_storage_account\'...
  local START_TIME=$(date +%s)
  echo 'window.settings.authEnabled = true' >> www/dist/settings.js
  az storage blob upload-batch \
    --account-name "$NAME_default_storage_account" \
    --source www/dist \
    --destination \$web \
    --query [].blob \
    -o tsv
  az storage blob service-properties update \
    --account-name "$NAME_default_storage_account" \
    --index-document index.html
  echo Pushed \'myfrontend\' content to website in default storage account \'$NAME_default_storage_account\' in $(since $START_TIME)
}

push-mybackend-myfunctions
push-myfrontend

#
# COMPLETION
#

echo
echo endpoints:
echo "  myfrontend: $PROP_myfrontend_primaryEndpoint"
echo
