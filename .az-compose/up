#!/bin/bash

LANGUAGE=csharp
if [ "$COMPOSE_FILE" == "azure-compose.js.yaml" ]; then
  LANGUAGE=javascript
fi

#
# PHASE 0: BUILD
#

build-frontend() {
  echo Building \'frontend\' in \'www\'...
  cd www
  npm install
  npm run generate
  cd ..
}

# build-frontend

#
# PHASE 1: CREATE
#

NAME_analyzer=analyzer-$(hash cognitiveservices/account/analyzer@$LOCATION)
create-analyzer() {
  NAME="$NAME_analyzer"
  echo Creating \'analyzer\' as cognitiveservices account \'$NAME\'...
  STDERR_FILTER=("Microsoft will use ")
  azq analyzer cognitiveservices account create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    -l "$LOCATION" \
    --kind ComputerVision \
    --sku F0 \
    --yes
}

NAME_backingStore=backings$(hash storage/account/backingStore@$LOCATION)
create-backingStore() {
  NAME="$NAME_backingStore"
  echo Creating \'backingStore\' as storage account \'$NAME\'...
  azq backingStore storage account create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    -l "$LOCATION" \
    --kind StorageV2 \
    --https-only \
    --sku Standard_LRS
  azq backingStore storage cors clear \
    --account-name "$NAME" \
    --services b
  azq backingStore storage cors add \
    --account-name "$NAME" \
    --services b \
    --methods OPTIONS PUT \
    --origins '*' \
    --allowed-headers '*' \
    --exposed-headers '*'
  azq backingStore storage container create \
    -n images \
    --account-name "$NAME" \
    --public-access blob
  azq backingStore storage container create \
    -n thumbnails \
    --account-name "$NAME" \
    --public-access blob
}

create-frontend() {
  echo Creating \'frontend\' as static website in storage account \'$NAME_backingStore\'...
  azq frontend storage blob service-properties update \
    --account-name "$NAME_backingStore" \
    --static-website
}

NAME_functions=functions-$(hash functionapp/functions@$LOCATION)
create-functions() {
  NAME="$NAME_functions"
  echo Creating \'functions\' as functionapp \'$NAME\'...
  azq functions functionapp create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP" \
    -c "$LOCATION" \
    -s "$NAME_backingStore"
}

NAME_imageDocuments_database_account=imagedocuments-$(hash cosmosdb/imageDocuments@$LOCATION)
NAME_imageDocuments_database=imagesdb
NAME_imageDocuments=images
create-imageDocuments() {
  NAME="$NAME_imageDocuments_database_account"
  echo Creating \'imageDocuments\' as cosmosdb collection \'$NAME_imageDocuments\' in database \'$NAME_imageDocuments_database\' account \'$NAME\'...
  azq imageDocuments cosmosdb create \
    -n "$NAME" \
    -g "$RESOURCE_GROUP"
  EXISTS=$(az cosmosdb database exists -n "$NAME" -g "$RESOURCE_GROUP" --db-name "$NAME_imageDocuments_database" -o tsv)
  if [ "$EXISTS" == "false" ]; then
    azq imageDocuments cosmosdb database create \
      -n "$NAME" \
      -g "$RESOURCE_GROUP" \
      --db-name "$NAME_imageDocuments_database"
  fi
  EXISTS=$(az cosmosdb collection exists -n "$NAME" -g "$RESOURCE_GROUP" --db-name "$NAME_imageDocuments_database" --collection-name "$NAME_imageDocuments" -o tsv)
  if [ "$EXISTS" == "false" ]; then
    azq imageDocuments cosmosdb collection create \
      -n "$NAME" \
      -g "$RESOURCE_GROUP" \
      --db-name "$NAME_imageDocuments_database" \
      --collection-name "$NAME_imageDocuments" \
      --throughput 400
  fi
}

create-analyzer & PID_create_analyzer=$!
sleep 0.1
create-backingStore & PID_create_backingStore=$!
sleep 0.1
create-imageDocuments & PID_create_imageDocuments=$!
sleep 0.1
wait $PID_create_backingStore
create-frontend & PID_create_frontend=$!
sleep 0.1
create-functions & PID_create_functions=$!
sleep 0.1
wait

#
# PHASE 2: RESOLVE
#

echo Resolving service properties...

VALUES_DIR=$(mktemp -d)
trap 'rm -rf $VALUES_DIR' EXIT

resolve-analyzer() {
  echo VAL_analyzer_url=$(az cognitiveservices account show \
    -n "$NAME_analyzer" \
    -g "$RESOURCE_GROUP" \
    --query endpoint \
    -o tsv) >> $VALUES_DIR/analyzer
  echo VAL_analyzer_key=$(az cognitiveservices account keys list \
    -n "$NAME_analyzer" \
    -g "$RESOURCE_GROUP" \
    --query key1 \
    -o tsv) >> $VALUES_DIR/analyzer
}

resolve-backingStore() {
  echo VAL_backingStore_primaryEndpoints_blob=$(az storage account show \
    -n "$NAME_backingStore" \
    -g "$RESOURCE_GROUP" \
    --query primaryEndpoints.blob \
    -o tsv 2>/dev/null | sed 's/\/$//') >> $VALUES_DIR/backingStore
  echo VAL_backingStore_connectionString=$(az storage account show-connection-string \
    -n "$NAME_backingStore" \
    -g "$RESOURCE_GROUP" \
    --query connectionString \
    -o tsv 2>/dev/null) >> $VALUES_DIR/backingStore
}

resolve-frontend() {
  echo VAL_frontend_primaryEndpoint=$(az storage account show \
    -n "$NAME_backingStore" \
    -g "$RESOURCE_GROUP" \
    --query primaryEndpoints.web \
    -o tsv 2>/dev/null | sed 's/\/$//') >> $VALUES_DIR/frontend
}

resolve-functions() {
  echo VAL_functions_defaultHostName=$(az functionapp show \
    -n "$NAME_functions" \
    -g "$RESOURCE_GROUP" \
    --query defaultHostName \
    -o tsv) >> $VALUES_DIR/functions
}

resolve-GetImages() {
  echo VAL_GetImages_app_defaultHostName=$VAL_functions_defaultHostName >> $VALUES_DIR/GetImages
  echo VAL_GetImages_name=GetImages >> $VALUES_DIR/GetImages
}

resolve-GetUploadUrl() {
  echo VAL_GetUploadUrl_app_defaultHostName=$VAL_functions_defaultHostName >> $VALUES_DIR/GetUploadUrl
  echo VAL_GetUploadUrl_name=GetUploadUrl >> $VALUES_DIR/GetUploadUrl
}

resolve-imageDocuments() {
  ENDPOINT=$(az cosmosdb show \
    -n "$NAME_imageDocuments_database_account" \
    -g "$RESOURCE_GROUP" \
    --query documentEndpoint \
    -o tsv) >> $VALUES_DIR/imageDocuments
  KEY=$(az cosmosdb list-keys \
    -n "$NAME_imageDocuments_database_account" \
    -g "$RESOURCE_GROUP" \
    --query primaryMasterKey \
    -o tsv)
  echo VAL_imageDocuments_database_account_connectionString="AccountEndpoint=$ENDPOINT;AccountKey=$KEY;" >> $VALUES_DIR/imageDocuments
  echo VAL_imageDocuments_database_name=$NAME_imageDocuments_database >> $VALUES_DIR/imageDocuments
  echo VAL_imageDocuments_name=$NAME_imageDocuments >> $VALUES_DIR/imageDocuments
}

resolve-images() {
  echo VAL_images_account_connectionString=$VAL_backingStore_connectionString >> $VALUES_DIR/images
  echo VAL_images_name=images >> $VALUES_DIR/images
}

resolve-ResizeImage() {
  echo VAL_ResizeImage_app_defaultHostName=$VAL_functions_defaultHostName >> $VALUES_DIR/ResizeImage
  echo VAL_ResizeImage_name=ResizeImage >> $VALUES_DIR/ResizeImage
}

resolve-thumbnails() {
  echo VAL_thumbnails_account_connectionString=$VAL_backingStore_connectionString >> $VALUES_DIR/thumbnails
  echo VAL_thumbnails_name=thumbnails >> $VALUES_DIR/thumbnails
}

resolve-analyzer & PID_resolve_analyzer=$!
resolve-backingStore & PID_resolve_backingStore=$!
resolve-frontend & PID_resolve_frontend=$!
resolve-functions & PID_resolve_functions=$!
resolve-imageDocuments & PID_resolve_imageDocuments=$!
wait $PID_resolve_backingStore && readenv $VALUES_DIR/backingStore
resolve-images & PID_resolve_images=$!
resolve-thumbnails & PID_resolve_thumbnails=$!
wait $PID_resolve_functions && readenv $VALUES_DIR/functions
resolve-GetImages & PID_resolve_GetImages=$!
resolve-GetUploadUrl & PID_resolve_GetUploadUrl=$!
resolve-ResizeImage & PID_resolve_ResizeImage=$!
wait
readenv $VALUES_DIR/analyzer
readenv $VALUES_DIR/frontend
readenv $VALUES_DIR/GetImages
readenv $VALUES_DIR/GetUploadUrl
readenv $VALUES_DIR/imageDocuments
readenv $VALUES_DIR/images
readenv $VALUES_DIR/ResizeImage
readenv $VALUES_DIR/thumbnails

#
# PHASE 3: CONFIGURE
#

configure-frontend() {
  echo Configuring \'frontend\' static website...
  echo 'window.settings = {}' > www/dist/settings.js
  echo 'window.settings.authEnabled = true' >> www/dist/settings.js
}

configure-functions() {
  echo Configuring \'functions\' functionapp...
  APP_ID=$(az ad app list --identifier-uri "https://$NAME_functions.azurewebsites.net" --query '[].appId' -o tsv)
  if [ -z "$APP_ID" ]; then
    APP_ID=$(az ad app create \
      --display-name "First Serverless Web Application" \
      --homepage "https://$VAL_functions_defaultHostName" \
      --identifier-uris "https://$VAL_functions_defaultHostName" \
      --reply-urls "https://$VAL_functions_defaultHostName/.auth/login/aad/callback" \
      --required-resource-accesses '[{
        "resourceAppId": "00000002-0000-0000-c000-000000000000",
        "resourceAccess": [
          {
            "id": "311a71cc-e848-46a1-bdf8-97ff7156d8e6",
            "type": "Scope"
          }
        ]
      }]' \
      --query appId \
      -o tsv)
  fi
  FUNCTIONAPP_AUTH_ENABLE=$(mktemp)
  trap 'rm -f $FUNCTIONAPP_AUTH_ENABLE' EXIT
  cat << EOF > $FUNCTIONAPP_AUTH_ENABLE
.properties.enabled = true |
.properties.runtimeVersion = "1.0.0" |
.properties.unauthenticatedClientAction = "RedirectToLoginPage" |
.properties.tokenStoreEnabled = true |
.properties.allowedExternalRedirectUrls = [ "$VAL_frontend_primaryEndpoint" ] |
.properties.defaultProvider = "AzureActiveDirectory" |
.properties.clientId = "$APP_ID" |
.properties.issuer = "https://sts.windows.net/$(az account show --query tenantId -o tsv)/" |
.properties.allowedAudiences = [ "https://$VAL_functions_defaultHostName/.auth/login/aad/callback" ] |
.properties.isAadAutoProvisioned = true
EOF
  az resource invoke-action \
    -g "$RESOURCE_GROUP" \
    --namespace Microsoft.Web \
    --parent "sites/$NAME_functions" \
    --resource-type config \
    -n authsettings \
    --action list \
    --api-version 2018-02-01 \
    -o tsv | \
  jq "$(cat $FUNCTIONAPP_AUTH_ENABLE)" | \
  az resource create \
    -g "$RESOURCE_GROUP" \
    --namespace Microsoft.Web \
    --parent "sites/$NAME_functions" \
    --resource-type config \
    -n authsettings \
    --api-version 2018-02-01 \
    --is-full-object \
    --properties @/dev/stdin > /dev/null
  azq functions resource update \
    -g "$RESOURCE_GROUP" \
    --namespace Microsoft.Web \
    --parent "sites/$NAME_functions" \
    --resource-type config \
    -n web \
    --api-version 2015-06-01 \
    --set properties.cors.allowedOrigins="['"$VAL_frontend_primaryEndpoint"']"
}

configure-frontend & PID_configure_frontend=$!
sleep 0.1
configure-functions & PID_configure_functions=$!
sleep 0.1
wait

#
# PHASE 4: BIND
#

bind-frontend() {
  echo Binding \'frontend\' static website to \'functions\' functionapp...
  echo 'window.settings.backingStore = { primaryEndpoints: { blob: "'$VAL_backingStore_primaryEndpoints_blob'" } }' >> www/dist/settings.js
  echo 'window.settings.functions = { defaultHostName: "'$VAL_functions_defaultHostName'" }' >> www/dist/settings.js
}

bind-functions() {
  echo Binding \'GetImages\' function to \'imageDocuments\' cosmosdb collection...
  echo Binding \'GetUploadUrl\' function to \'images\' storage container...
  echo Binding \'ResizeImage\' function to \'backingStore\' storage account...
  echo Binding \'ResizeImage\' function to \'imageDocuments\' cosmosdb collection...
  echo Binding \'ResizeImage\' function to \'analyzer\' cognitiveservices account...
  azq functions functionapp config appsettings set -n "$NAME_functions" -g "$RESOURCE_GROUP" --settings \
    "ANALYZER_URL=$VAL_analyzer_url" \
    "ANALYZER_KEY=$VAL_analyzer_key" \
    "BACKINGSTORE_CONNECTIONSTRING=$VAL_backingStore_connectionString" \
    "IMAGEDOCUMENTS_DATABASE_ACCOUNT_CONNECTIONSTRING=$VAL_imageDocuments_database_account_connectionString" \
    "IMAGEDOCUMENTS_DATABASE_NAME=$VAL_imageDocuments_database_name" \
    "IMAGEDOCUMENTS_NAME=$VAL_imageDocuments_name" \
    "IMAGES_ACCOUNT_CONNECTIONSTRING=$VAL_images_account_connectionString" \
    "IMAGES_NAME=$VAL_images_name"
}

bind-frontend & PID_bind_frontend=$!
sleep 0.1
bind-functions & PID_bind_functions=$!
sleep 0.1
wait

#
# PHASE 5: PUSH
#

push-frontend() {
  echo Uploading files to \'frontend\' static website...
  az storage blob upload-batch \
    --account-name "$NAME_backingStore" \
    --source www/dist \
    --destination \$web \
    --query blob \
    -o tsv
  az storage blob service-properties update \
    --account-name "$NAME_backingStore" \
    --index-document index.html
}

push-functions() {
  echo Deploying functions to \'functions\' functionapp...
  PACKAGE_DIR=$(mktemp -d)
  ZIP_FILE=$(mktemp -u).zip
  trap 'rm -rf $PACKAGE_DIR; rm -f $ZIP_FILE' EXIT
  cp -R "$LANGUAGE/GetImages" $PACKAGE_DIR
  cp -R "$LANGUAGE/GetUploadUrl" $PACKAGE_DIR
  cp -R "$LANGUAGE/ResizeImage" $PACKAGE_DIR
  (cd $PACKAGE_DIR && zip -r $ZIP_FILE .)
  az functionapp deployment source config-zip \
    -n "$NAME_functions" \
    -g "$RESOURCE_GROUP" \
    --src $ZIP_FILE \
    --query message \
    -o tsv
}

push-frontend
push-functions

echo
echo Available endpoints:
echo   frontend: $VAL_frontend_primaryEndpoint
echo
